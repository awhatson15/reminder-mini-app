const TelegramBot = require('node-telegram-bot-api');
const reminderRepository = require('../repositories/reminderRepository');
const userRepository = require('../repositories/userRepository');
const { logger } = require('../utils/logger');

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
const formatDate = (date) => {
  const day = date.day;
  const month = date.month;
  const year = date.year;
  
  const monthNames = [
    '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
    '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
  ];
  
  return `${day} ${monthNames[month - 1]}${year ? ` ${year} –≥–æ–¥–∞` : ''}`;
};

// –§—É–Ω–∫—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–Ω–µ–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const getDaysUntil = (day, month, year) => {
  const today = new Date();
  const targetDate = new Date();
  
  targetDate.setDate(day);
  targetDate.setMonth(month - 1);
  
  // –ï—Å–ª–∏ –≥–æ–¥ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
  if (year) {
    targetDate.setFullYear(year);
  } else {
    // –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω (–¥–ª—è –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è), 
    // –ø—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞ –ª–∏ –¥–∞—Ç–∞ –≤ —ç—Ç–æ–º –≥–æ–¥—É
    if (
      targetDate.getMonth() < today.getMonth() ||
      (targetDate.getMonth() === today.getMonth() && targetDate.getDate() < today.getDate())
    ) {
      targetDate.setFullYear(today.getFullYear() + 1);
    } else {
      targetDate.setFullYear(today.getFullYear());
    }
  }
  
  // –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
  const diffMs = targetDate - today;
  // –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞)
  const diffDays = Math.ceil(diffMs / (1000 * 60 * 60 * 24));
  
  return diffDays;
};

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
const checkRecurringReminder = (reminder, today) => {
  const { date, recurringType, recurringDayOfWeek, lastTriggered, notifyDaysBefore } = reminder;
  let shouldNotify = false;
  let targetDate = null;
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –æ–Ω–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞
  if (reminder.endDate && new Date(reminder.endDate) < today) {
    return { shouldNotify: false };
  }
  
  // –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
  const lastTrigger = lastTriggered ? new Date(lastTriggered) : new Date(today);
  lastTrigger.setHours(0, 0, 0, 0);
  
  switch (recurringType) {
    case 'weekly':
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
      const todayDayOfWeek = today.getDay(); // 0-6 (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - —Å—É–±–±–æ—Ç–∞)
      
      if (recurringDayOfWeek === todayDayOfWeek) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
        const daysSinceLastTrigger = Math.round((today - lastTrigger) / (1000 * 60 * 60 * 24));
        if (daysSinceLastTrigger >= 7) {
          // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å —É—á–µ—Ç–æ–º notifyDaysBefore)
          targetDate = new Date(today);
          targetDate.setDate(targetDate.getDate() + notifyDaysBefore);
          shouldNotify = true;
        }
      }
      break;
      
    case 'monthly':
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª –ª–∏ –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
      if (today.getDate() === date.day - notifyDaysBefore) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ
        if (
          lastTrigger.getMonth() !== today.getMonth() || 
          lastTrigger.getFullYear() !== today.getFullYear()
        ) {
          targetDate = new Date(today);
          targetDate.setDate(date.day);
          shouldNotify = true;
        }
      }
      break;
      
    case 'yearly':
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–∞ –ª–∏ –Ω—É–∂–Ω–∞—è –¥–∞—Ç–∞ (—Å —É—á–µ—Ç–æ–º notifyDaysBefore)
      const targetMonth = date.month - 1; // JavaScript –º–µ—Å—è—Ü—ã –æ—Ç 0 –¥–æ 11
      const targetDay = date.day;
      
      if (
        (today.getMonth() === targetMonth && today.getDate() === targetDay - notifyDaysBefore) ||
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –Ω–∞ —Å—Ç—ã–∫–µ –º–µ—Å—è—Ü–µ–≤
        (today.getMonth() === targetMonth - 1 && 
         today.getDate() === new Date(today.getFullYear(), targetMonth, 0).getDate() - (notifyDaysBefore - targetDay))
      ) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —ç—Ç–æ–º –≥–æ–¥—É
        if (lastTrigger.getFullYear() !== today.getFullYear()) {
          targetDate = new Date(today.getFullYear(), targetMonth, targetDay);
          shouldNotify = true;
        }
      }
      break;
  }
  
  return { shouldNotify, targetDate };
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
const sendReminders = async () => {
  try {
    const today = new Date();
    today.setHours(0, 0, 0, 0); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è
    
    logger.info('–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await userRepository.findAll();
    
    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    let sentCount = 0;
    
    for (const user of users) {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const reminders = await reminderRepository.findByUserId(user._id);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
      for (const reminder of reminders) {
        const { date, title, type, notifyDaysBefore, group, isRecurring } = reminder;
        
        let shouldNotify = false;
        let targetDate;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω–æ–µ –ª–∏ —ç—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        if (isRecurring) {
          const result = checkRecurringReminder(reminder, today);
          shouldNotify = result.shouldNotify;
          targetDate = result.targetDate;
        } else {
          // –û–±—ã—á–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
          const daysUntil = getDaysUntil(date.day, date.month, date.year);
          
          if (daysUntil === notifyDaysBefore) {
            shouldNotify = true;
            targetDate = new Date();
            targetDate.setDate(targetDate.getDate() + daysUntil);
          }
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (shouldNotify) {
          let message = '';
          const groupPrefix = group !== '–¥—Ä—É–≥–æ–µ' ? `[${group}] ` : '';
          
          if (type === 'birthday') {
            message = `üéÇ ${groupPrefix}–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ ${notifyDaysBefore} ${plural(notifyDaysBefore, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')} –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É ${title} (${formatDate(date)})`;
          } else if (isRecurring) {
            const recurringText = {
              'weekly': '–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ',
              'monthly': '–µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ',
              'yearly': '–µ–∂–µ–≥–æ–¥–Ω–æ–µ'
            }[reminder.recurringType];
            
            message = `üîÑ ${groupPrefix}–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ${recurringText} —Å–æ–±—ã—Ç–∏–µ "${title}" (${targetDate.getDate()} ${targetDate.toLocaleString('ru', { month: 'long' })})`;
          } else {
            message = `üìÖ ${groupPrefix}–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —á–µ—Ä–µ–∑ ${notifyDaysBefore} ${plural(notifyDaysBefore, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')} —Å–æ–±—ã—Ç–∏–µ "${title}" (${formatDate(date)})`;
          }
          
          if (reminder.description) {
            message += `\n\n–û–ø–∏—Å–∞–Ω–∏–µ: ${reminder.description}`;
          }
          
          try {
            await bot.sendMessage(user.telegramId, message);
            logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}: ${title}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Ä–µ–Ω—Ç–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            if (isRecurring) {
              await reminderRepository.update(reminder._id, { 
                lastTriggered: new Date() 
              });
            }
            
            sentCount++;
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.telegramId}:`, error);
          }
        }
      }
    }
    
    logger.info(`–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${sentCount}`);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:', error);
  }
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–∫–ª–æ–Ω–µ–Ω–∏—è —Å–ª–æ–≤
const plural = (number, one, two, five) => {
  let n = Math.abs(number);
  n %= 100;
  if (n >= 5 && n <= 20) {
    return five;
  }
  n %= 10;
  if (n === 1) {
    return one;
  }
  if (n >= 2 && n <= 4) {
    return two;
  }
  return five;
};

module.exports = { sendReminders }; 